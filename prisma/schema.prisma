generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  VISITOR
  AUTHOR
  GUEST
}

enum PostStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  PENDING
}

enum CommentStatus {
  VISIBLE
  PENDING
  HIDDEN
  DELETED
}

enum ReactionType {
  LIKE
  CLAP
  INSIGHTFUL
}

enum ReportStatus {
  OPEN
  REVIEWED
  DISMISSED
}

enum TargetType {
  POST
  COMMENT
  USER
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  name          String
  email         String    @unique
  emailVerified Boolean
  image         String?
  role          UserRole  @default(USER)
  
  bio           String?
  social        Json?
  
  // Relations
  sessions      Session[]
  accounts      Account[]
  posts         Post[]
  comments      Comment[]
  reactions     Reaction[]
  bookmarks     Bookmark[]
  followers     Follow[]  @relation("UserFollowers")
  following     Follow[]  @relation("UserFollowing")
  reports       Report[]  @relation("ReportedBy")
  notifications Notification[]
  auditLogs     AuditLog[]
  postVersions  PostVersion[]

  @@map("user")
}

model Session {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  expiresAt DateTime
  token     String   @unique
  
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                     String   @id @default(cuid()) @map("_id")
  userId                 String
  accountId              String
  providerId             String
  user                   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken            String?
  refreshToken           String?
  idToken                String?
  accessTokenExpiresAt   DateTime?
  refreshTokenExpiresAt  DateTime?
  scope                  String?
  password               String?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String    @id @default(cuid()) @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@map("verification")
}

model Post {
  id          String     @id @default(cuid()) @map("_id")
  authorId    String
  title       String
  slug        String     @unique
  excerpt     String?
  content     String
  coverImage  String?
  ogImage     String?
  status      PostStatus @default(DRAFT)
  scheduledAt DateTime?
  publishedAt DateTime?
  readingTime Int?
  views       Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  author     User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category   Category?  @relation(fields: [categoryId], references: [id])
  categoryId String?
  tags       Tag[]      @relation(fields: [tagIds], references: [id])
  tagIds     String[]
  comments   Comment[]
  reactions  Reaction[]
  bookmarks  Bookmark[]
  versions   PostVersion[]

  @@map("posts")
}

model PostVersion {
  id        String   @id @default(cuid()) @map("_id")
  postId    String
  title     String
  content   String
  createdAt DateTime @default(now())
  editorId  String

  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  editor User @relation(fields: [editorId], references: [id])

  @@map("post_versions")
}

model Category {
  id          String @id @default(cuid()) @map("_id")
  name        String @unique
  slug        String @unique
  description String?
  posts       Post[]

  @@map("categories")
}

model Tag {
  id      String  @id @default(cuid()) @map("_id")
  name    String  @unique
  slug    String  @unique
  description String?
  posts   Post[]  @relation(fields: [postIds], references: [id])
  postIds String[]

  @@map("tags")
}

model Comment {
  id        String        @id @default(cuid()) @map("_id")
  postId    String
  authorId  String
  parentId  String?
  body      String
  status    CommentStatus @default(VISIBLE)
  editedAt  DateTime?
  createdAt DateTime      @default(now())

  // Relations
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("CommentReplies")
  reactions Reaction[]

  @@map("comments")
}

model Reaction {
  id        String       @id @default(cuid()) @map("_id")
  userId    String
  postId    String?
  commentId String?
  type      ReactionType
  createdAt DateTime     @default(now())

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, postId, type])
  @@unique([userId, commentId, type])
  @@map("reactions")
}

model Bookmark {
  id        String   @id @default(cuid()) @map("_id")
  userId    String
  postId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("bookmarks")
}

model Follow {
  id          String   @id @default(cuid()) @map("_id")
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model Report {
  id         String       @id @default(cuid()) @map("_id")
  reporterId String
  targetType TargetType
  targetId   String
  reason     String
  status     ReportStatus @default(OPEN)
  createdAt  DateTime     @default(now())

  reporter User @relation("ReportedBy", fields: [reporterId], references: [id], onDelete: Cascade)

  @@map("reports")
}

model SiteSetting {
  id    String @id @default(cuid()) @map("_id")
  key   String @unique
  value Json

  @@map("site_settings")
}

model Notification {
  id        String   @id @default(cuid()) @map("_id")
  userId    String
  type      String
  payload   Json
  readAt    DateTime?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model AuditLog {
  id         String   @id @default(cuid()) @map("_id")
  actorId    String
  action     String
  targetType String
  targetId   String
  meta       Json?
  createdAt  DateTime @default(now())

  actor User @relation(fields: [actorId], references: [id], onDelete: Cascade)

  @@map("audit_logs")
}




